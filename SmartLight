/*--------------------------------------------------------------
  Program:      smart_lights

  Description:  Control your lights on any device connnected
                to your internet router
  
  Hardware:     - Arduino Uno and official Arduino Ethernet
                  shield. Should work with other Arduinos and
                  compatible Ethernet shields.
                - Lights
                
  Software:     Developed using Arduino 1.0.3 software
                Should be compatible with Arduino 1.0 +
  
  References:   - WebServer example by David A. Mellis and 
                  modified by Tom Igoe
                - Ethernet library documentation:
                  http://arduino.cc/en/Reference/Ethernet

  Date:         15 February 2016
 
  Author:      Juan Lucas
--------------------------------------------------------------*/

#include <SPI.h>
#include <Ethernet.h>

// MAC address from Ethernet shield sticker under board
// You may need to set your own mac address for your Arduino
byte mac[] = {
  0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02
};

// SET THIS YOURSELF!
IPAddress ip(192, 168, 0, 5); // SET THIS YOURSELF
EthernetServer server(80);    // create a server at port 80

String HTTP_req;      // stores the HTTP request
int LED_status = 0;   // updates the web page
int redPin = 2;       // connect red to the Arduino GPIO
int bluePin = 3;      // connect blue to the Arduino GPIO
int greenPin = 5;     // connect green to the Arduino GPIO

void setup()
{
    Ethernet.begin(mac, ip);  // initialize Ethernet device
    server.begin();           // start to listen for clients
    Serial.begin(9600);       // for diagnostics

    // set the color pins pins to OUTPUT
    pinMode(redPin, OUTPUT);       
    pinMode(bluePin, OUTPUT);       
    pinMode(greenPin, OUTPUT);
}

void loop()
{
    EthernetClient client = server.available();  // try to get client

    if (client) {  // got client?
        boolean currentLineIsBlank = true;
        while (client.connected()) {
            if (client.available()) {   // client data available to read
                char c = client.read(); // read 1 byte (character) from client
                HTTP_req += c;  // save the HTTP request 1 char at a time
                // last line of client request is blank and ends with \n
                // respond to client only after last line received
                if (c == '\n' && currentLineIsBlank) {
                    // send a standard http response header
                    client.println("HTTP/1.1 200 OK");
                    client.println("Content-Type: text/html");
                    client.println("Connection: close");
                    client.println();
                    // send web page
                    
                    client.println("<!DOCTYPE html>");
                    client.println("<html>");
                    client.println("<head>");
                    client.println("<title>Smart Lights</title>");
                    client.println("</head>");
                    client.println("<body>");
                    // my name is Jean-Luc. your's may not be
                    client.println("<h1>Jean-Luc\'s Smart Lights</h1>");
                    client.println("<p>Press the Button Light it Up</p>");
                    client.println("<form method=\"get\">");
                    ProcessCheckbox(client);
                    client.println("</form>");
                    client.println("</body>");
                    client.println("</html>");
                    Serial.print(HTTP_req);
                    HTTP_req = "";    // finished with request, empty string
                    break;
                }
                // every line of text received from the client ends with \r\n
                if (c == '\n') {
                    // last character on line of received text
                    // starting new line with next character read
                    currentLineIsBlank = true;
                } 
                else if (c != '\r') {
                    // a text character was received from client
                    currentLineIsBlank = false;
                }
            } // end if (client.available())
        } // end while (client.connected())
        delay(1);      // give the web browser time to receive the data
        client.stop(); // close the connection
    } // end if (client)
}

// switch LED and send back HTML for LED checkbox
void ProcessCheckbox(EthernetClient cl)
{

    // Everytime a button is pressed refresh the page
    // and increment LED_Status
    if (LED_status == 0) {
      LED_status = 1;        
          digitalWrite(redPin, LOW);
          digitalWrite(greenPin, HIGH);
          digitalWrite(bluePin, HIGH);
            cl.println("<input type=\"submit\" value=\"TURN OFF\" \
            onclick=\"submit();\"> TURN OFF");
    }
    else if (LED_status == 1) {
      LED_status = 2;
          digitalWrite(greenPin, LOW);
          digitalWrite(bluePin, LOW);
          digitalWrite(redPin, LOW);
            cl.println("<input type=\"submit\" value=\"MAKE BLUE\" \
            onclick=\"submit();\"> MAKE BLUE");      
    }
    else if (LED_status == 2) {
      LED_status = 3;
          digitalWrite(bluePin, HIGH);
          cl.println("<input type=\"submit\" value=\"MAKE PURPLE\" \
            onclick=\"submit();\" checked> MAKE PURPLE");
    }
    else {
      LED_status = 0;
          digitalWrite(bluePin, HIGH);
          digitalWrite(redPin, HIGH);
          cl.println("<input type=\"submit\" value=\"MAKE CYAN\" \
            onclick=\"submit();\"> MAKE CYAN");
    }
}


